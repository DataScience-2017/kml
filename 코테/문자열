# 1.	Abcde 문자 순서 바꾸는 문제 [[1,3],[1,4],[4,5]]
# ----------------------------------------------------
# 2.	Aaabbcccdd 문자의 고유문자갯수를 세고, 홀수개수를 출력하는 문제
### 몰랐던 것 Counter함수, counter.keys(), counter.values()
from collections import Counter

# 주어진 문자열
text = "Aaabbcccddeeeㅇㅇㅇ"

# 문자 개수 세기
char_count = Counter(text)
print(char_count.keys(),char_count.values())
# 고유 문자 개수 및 홀수 개수 세기
unique_count = len(char_count)
odd_count = sum(1 for count in char_count.values() if count % 2 != 0)

# 결과 출력
print("고유 문자 개수:", unique_count)
print("홀수 개수:", odd_count)
# ----------------------------------------------------

# 3.	‘his name is alex. And he is really good man’에서 a-z 중 사용되지 않은 문자를 출력하는 문제
### 몰랐던 것 set데이터타입, string.ascii_lowercase
import string

# 주어진 문자열
text = "his name is alex. And he is really good man"

# 소문자로 변환하고, 공백 및 특수문자 제거
text = text.lower()
print(text)
# 사용된 문자 집합 생성
used_characters = set(text)
## !! set 데이터타입 :  교유값, 순서없음, 변경가능, 공백제거
print(used_characters)
# 알파벳 집합 생성
all_characters = set(string.ascii_lowercase)
print(string.ascii_lowercase)
# 사용되지 않은 문자 찾기
unused_characters = all_characters - used_characters

# 결과 출력
print("사용되지 않은 문자:", sorted(unused_characters))


# ----------------------------------------------------
# 4.	Aaabbbbbcccc에서 중복되는 문자를 *로 바꾸는 문제. A***b****c***
### 몰랐던 것 set활용, if lower_char in see: <- 요 아이디어 떠올리기
def replace_duplicates(text):
    # 결과를 저장할 리스트
    result = []
    # 중복된 문자를 저장할 집합
    seen = set()

    for char in text:
        # 대소문자를 구분하지 않기 위해 소문자로 변환
        lower_char = char.lower()
        if lower_char in seen:
            # 이미 본 문자라면 *
            result.append('*')
        else:
            # 처음 보는 문자라면 결과에 추가하고 집합에 추가
            result.append(char)
            seen.add(lower_char)

    return ''.join(result)


# 주어진 문자열
text = "Aaabbbbbcccc"
# 중복 문자 처리
output = replace_duplicates(text)

print(output)  # 출력: A***b****c***

